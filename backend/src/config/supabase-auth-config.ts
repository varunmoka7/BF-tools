/**
 * Supabase Authentication Configuration for Waste Intelligence Platform
 * Email templates, storage buckets, and auth settings
 */

import { createClient } from '@supabase/supabase-js';
import SupabaseConnection from '../database/supabase-connection';

export class SupabaseAuthConfig {
  private db: SupabaseConnection;

  constructor() {
    this.db = SupabaseConnection.getInstance();
  }

  /**
   * Initialize authentication configuration
   */
  async initializeAuthConfig(): Promise<void> {
    try {
      await this.setupStorageBuckets();
      await this.configureAuthSettings();
      await this.setupEmailTemplates();
      console.log('✅ Supabase auth configuration completed');
    } catch (error) {
      console.error('❌ Supabase auth configuration failed:', error);
      throw error;
    }
  }

  /**
   * Setup storage buckets for user content
   */
  private async setupStorageBuckets(): Promise<void> {\n    const supabase = this.db.getSupabaseClient(true); // Use service role\n\n    // Create profile pictures bucket\n    const { error: profileBucketError } = await supabase.storage.createBucket('profile-pictures', {\n      public: false,\n      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp'],\n      fileSizeLimit: 5242880, // 5MB\n    });\n\n    if (profileBucketError && !profileBucketError.message.includes('already exists')) {\n      console.error('Profile pictures bucket creation failed:', profileBucketError);\n    }\n\n    // Create company logos bucket\n    const { error: logoBucketError } = await supabase.storage.createBucket('company-logos', {\n      public: true,\n      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/svg+xml', 'image/webp'],\n      fileSizeLimit: 2097152, // 2MB\n    });\n\n    if (logoBucketError && !logoBucketError.message.includes('already exists')) {\n      console.error('Company logos bucket creation failed:', logoBucketError);\n    }\n\n    // Create documents bucket\n    const { error: docsBucketError } = await supabase.storage.createBucket('documents', {\n      public: false,\n      allowedMimeTypes: [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'text/csv'\n      ],\n      fileSizeLimit: 10485760, // 10MB\n    });\n\n    if (docsBucketError && !docsBucketError.message.includes('already exists')) {\n      console.error('Documents bucket creation failed:', docsBucketError);\n    }\n\n    // Setup bucket policies\n    await this.setupStoragePolicies();\n  }\n\n  /**\n   * Setup storage bucket policies\n   */\n  private async setupStoragePolicies(): Promise<void> {\n    const policies = [\n      // Profile pictures policies\n      {\n        table: 'objects',\n        policy: 'profile_pictures_upload',\n        definition: `\n          CREATE POLICY \"Users can upload own profile pictures\" ON storage.objects\n          FOR INSERT WITH CHECK (\n            bucket_id = 'profile-pictures'\n            AND auth.uid()::text = (storage.foldername(name))[1]\n          );\n        `\n      },\n      {\n        table: 'objects',\n        policy: 'profile_pictures_view',\n        definition: `\n          CREATE POLICY \"Users can view accessible profile pictures\" ON storage.objects\n          FOR SELECT USING (\n            bucket_id = 'profile-pictures'\n            AND (\n              auth.uid()::text = (storage.foldername(name))[1]\n              OR auth.is_admin()\n            )\n          );\n        `\n      },\n      {\n        table: 'objects',\n        policy: 'profile_pictures_update',\n        definition: `\n          CREATE POLICY \"Users can update own profile pictures\" ON storage.objects\n          FOR UPDATE USING (\n            bucket_id = 'profile-pictures'\n            AND auth.uid()::text = (storage.foldername(name))[1]\n          );\n        `\n      },\n      {\n        table: 'objects',\n        policy: 'profile_pictures_delete',\n        definition: `\n          CREATE POLICY \"Users can delete own profile pictures\" ON storage.objects\n          FOR DELETE USING (\n            bucket_id = 'profile-pictures'\n            AND auth.uid()::text = (storage.foldername(name))[1]\n          );\n        `\n      },\n      // Company logos policies\n      {\n        table: 'objects',\n        policy: 'company_logos_view',\n        definition: `\n          CREATE POLICY \"All can view company logos\" ON storage.objects\n          FOR SELECT USING (bucket_id = 'company-logos');\n        `\n      },\n      {\n        table: 'objects',\n        policy: 'company_logos_upload',\n        definition: `\n          CREATE POLICY \"Authorized users can upload company logos\" ON storage.objects\n          FOR INSERT WITH CHECK (\n            bucket_id = 'company-logos'\n            AND auth.has_company_permission(\n              (storage.foldername(name))[1]::uuid, 'write'\n            )\n          );\n        `\n      },\n      // Documents policies\n      {\n        table: 'objects',\n        policy: 'documents_company_access',\n        definition: `\n          CREATE POLICY \"Company members can access documents\" ON storage.objects\n          FOR ALL USING (\n            bucket_id = 'documents'\n            AND auth.has_company_access(\n              (storage.foldername(name))[1]::uuid\n            )\n          );\n        `\n      }\n    ];\n\n    for (const policy of policies) {\n      try {\n        await this.db.query(`DROP POLICY IF EXISTS \"${policy.policy}\" ON storage.${policy.table};`);\n        await this.db.query(policy.definition);\n      } catch (error) {\n        console.error(`Storage policy ${policy.policy} setup failed:`, error);\n      }\n    }\n  }\n\n  /**\n   * Configure auth settings\n   */\n  private async configureAuthSettings(): Promise<void> {\n    // Note: These settings would typically be configured via Supabase Dashboard\n    // or using the Management API. Here we document the recommended settings.\n    \n    const authSettings = {\n      // General settings\n      site_url: process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',\n      jwt_expiry: 3600, // 1 hour\n      refresh_token_rotation_enabled: true,\n      security_update_password_require_reauthentication: true,\n      \n      // Email settings\n      email_confirm_url: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/confirm`,\n      email_password_reset_url: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/reset-password`,\n      email_invitation_url: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/invitation`,\n      \n      // Security settings\n      password_min_length: 8,\n      session_timeout_hours: 24,\n      max_password_attempts: 5,\n      lockout_duration_minutes: 30,\n      \n      // External providers (if needed)\n      external_google_enabled: false,\n      external_github_enabled: false,\n      external_microsoft_enabled: false,\n    };\n\n    console.log('Auth settings to configure in Supabase Dashboard:', authSettings);\n  }\n\n  /**\n   * Setup email templates\n   */\n  private async setupEmailTemplates(): Promise<void> {\n    // Note: Email templates are typically configured via Supabase Dashboard\n    // Here we provide the templates that should be configured\n    \n    const emailTemplates = {\n      // Email confirmation template\n      confirmation: {\n        subject: 'Confirm your email for Waste Intelligence Platform',\n        body: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 20px; text-align: center;\">\n              <h1 style=\"color: white; margin: 0; font-size: 24px;\">Welcome to Waste Intelligence Platform</h1>\n            </div>\n            \n            <div style=\"padding: 40px 20px; background: #f8f9fa;\">\n              <h2 style=\"color: #333; margin-bottom: 20px;\">Confirm Your Email Address</h2>\n              \n              <p style=\"color: #666; line-height: 1.6; margin-bottom: 30px;\">\n                Thank you for signing up! Please click the button below to confirm your email address and complete your registration.\n              </p>\n              \n              <div style=\"text-align: center; margin-bottom: 30px;\">\n                <a href=\"{{ .ConfirmationURL }}\" \n                   style=\"background: #667eea; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; font-weight: bold;\">\n                  Confirm Email Address\n                </a>\n              </div>\n              \n              <p style=\"color: #999; font-size: 14px; text-align: center;\">\n                If you didn't create an account, you can safely ignore this email.\n              </p>\n              \n              <div style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center;\">\n                <p style=\"color: #999; font-size: 12px; margin: 0;\">\n                  © 2024 Waste Intelligence Platform. All rights reserved.\n                </p>\n              </div>\n            </div>\n          </div>\n        `\n      },\n      \n      // Password reset template\n      recovery: {\n        subject: 'Reset your password for Waste Intelligence Platform',\n        body: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 20px; text-align: center;\">\n              <h1 style=\"color: white; margin: 0; font-size: 24px;\">Password Reset Request</h1>\n            </div>\n            \n            <div style=\"padding: 40px 20px; background: #f8f9fa;\">\n              <h2 style=\"color: #333; margin-bottom: 20px;\">Reset Your Password</h2>\n              \n              <p style=\"color: #666; line-height: 1.6; margin-bottom: 30px;\">\n                We received a request to reset your password. Click the button below to create a new password.\n              </p>\n              \n              <div style=\"text-align: center; margin-bottom: 30px;\">\n                <a href=\"{{ .ConfirmationURL }}\" \n                   style=\"background: #dc3545; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; font-weight: bold;\">\n                  Reset Password\n                </a>\n              </div>\n              \n              <p style=\"color: #666; line-height: 1.6; margin-bottom: 20px;\">\n                This link will expire in 1 hour for security reasons.\n              </p>\n              \n              <p style=\"color: #999; font-size: 14px; text-align: center;\">\n                If you didn't request a password reset, you can safely ignore this email.\n              </p>\n              \n              <div style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center;\">\n                <p style=\"color: #999; font-size: 12px; margin: 0;\">\n                  © 2024 Waste Intelligence Platform. All rights reserved.\n                </p>\n              </div>\n            </div>\n          </div>\n        `\n      },\n      \n      // Invitation template\n      invitation: {\n        subject: 'You\\'ve been invited to Waste Intelligence Platform',\n        body: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 20px; text-align: center;\">\n              <h1 style=\"color: white; margin: 0; font-size: 24px;\">You're Invited!</h1>\n            </div>\n            \n            <div style=\"padding: 40px 20px; background: #f8f9fa;\">\n              <h2 style=\"color: #333; margin-bottom: 20px;\">Join Waste Intelligence Platform</h2>\n              \n              <p style=\"color: #666; line-height: 1.6; margin-bottom: 20px;\">\n                <strong>{{ .InviterName }}</strong> has invited you to join <strong>{{ .CompanyName }}</strong> on Waste Intelligence Platform.\n              </p>\n              \n              <div style=\"background: white; padding: 20px; border-radius: 5px; margin-bottom: 30px; border-left: 4px solid #667eea;\">\n                <p style=\"color: #666; margin: 0; line-height: 1.6;\">\n                  {{ .InvitationMessage }}\n                </p>\n              </div>\n              \n              <div style=\"text-align: center; margin-bottom: 30px;\">\n                <a href=\"{{ .InvitationURL }}\" \n                   style=\"background: #28a745; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; font-weight: bold;\">\n                  Accept Invitation\n                </a>\n              </div>\n              \n              <p style=\"color: #666; line-height: 1.6; margin-bottom: 20px;\">\n                This invitation will expire in 7 days.\n              </p>\n              \n              <div style=\"background: #e9ecef; padding: 20px; border-radius: 5px; margin-bottom: 30px;\">\n                <h3 style=\"color: #495057; margin-top: 0; font-size: 16px;\">About Waste Intelligence Platform</h3>\n                <p style=\"color: #6c757d; margin-bottom: 0; font-size: 14px; line-height: 1.5;\">\n                  A comprehensive platform for tracking, analyzing, and optimizing waste management practices across organizations.\n                </p>\n              </div>\n              \n              <p style=\"color: #999; font-size: 14px; text-align: center;\">\n                If you don't want to accept this invitation, you can safely ignore this email.\n              </p>\n              \n              <div style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center;\">\n                <p style=\"color: #999; font-size: 12px; margin: 0;\">\n                  © 2024 Waste Intelligence Platform. All rights reserved.\n                </p>\n              </div>\n            </div>\n          </div>\n        `\n      },\n      \n      // Magic link template\n      magic_link: {\n        subject: 'Your secure login link for Waste Intelligence Platform',\n        body: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 20px; text-align: center;\">\n              <h1 style=\"color: white; margin: 0; font-size: 24px;\">Secure Login</h1>\n            </div>\n            \n            <div style=\"padding: 40px 20px; background: #f8f9fa;\">\n              <h2 style=\"color: #333; margin-bottom: 20px;\">Your Login Link</h2>\n              \n              <p style=\"color: #666; line-height: 1.6; margin-bottom: 30px;\">\n                Click the button below to securely log in to your account. No password required!\n              </p>\n              \n              <div style=\"text-align: center; margin-bottom: 30px;\">\n                <a href=\"{{ .ConfirmationURL }}\" \n                   style=\"background: #667eea; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; font-weight: bold;\">\n                  Log In Securely\n                </a>\n              </div>\n              \n              <p style=\"color: #666; line-height: 1.6; margin-bottom: 20px;\">\n                This link will expire in 15 minutes for security reasons.\n              </p>\n              \n              <p style=\"color: #999; font-size: 14px; text-align: center;\">\n                If you didn't request this login link, you can safely ignore this email.\n              </p>\n              \n              <div style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center;\">\n                <p style=\"color: #999; font-size: 12px; margin: 0;\">\n                  © 2024 Waste Intelligence Platform. All rights reserved.\n                </p>\n              </div>\n            </div>\n          </div>\n        `\n      }\n    };\n\n    console.log('Email templates to configure in Supabase Dashboard:', emailTemplates);\n  }\n\n  /**\n   * Upload avatar image\n   */\n  async uploadAvatar(userId: string, file: Buffer, fileName: string): Promise<{ url: string; error: any }> {\n    try {\n      const supabase = this.db.getSupabaseClient(true);\n      const filePath = `${userId}/${Date.now()}-${fileName}`;\n\n      const { data, error } = await supabase.storage\n        .from('profile-pictures')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: false\n        });\n\n      if (error) {\n        return { url: '', error };\n      }\n\n      // Get public URL\n      const { data: { publicUrl } } = supabase.storage\n        .from('profile-pictures')\n        .getPublicUrl(filePath);\n\n      return { url: publicUrl, error: null };\n    } catch (error) {\n      return { url: '', error };\n    }\n  }\n\n  /**\n   * Upload company logo\n   */\n  async uploadCompanyLogo(companyId: string, file: Buffer, fileName: string): Promise<{ url: string; error: any }> {\n    try {\n      const supabase = this.db.getSupabaseClient(true);\n      const filePath = `${companyId}/${Date.now()}-${fileName}`;\n\n      const { data, error } = await supabase.storage\n        .from('company-logos')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: false\n        });\n\n      if (error) {\n        return { url: '', error };\n      }\n\n      // Get public URL\n      const { data: { publicUrl } } = supabase.storage\n        .from('company-logos')\n        .getPublicUrl(filePath);\n\n      return { url: publicUrl, error: null };\n    } catch (error) {\n      return { url: '', error };\n    }\n  }\n\n  /**\n   * Upload document\n   */\n  async uploadDocument(\n    companyId: string,\n    file: Buffer,\n    fileName: string,\n    userId: string\n  ): Promise<{ url: string; path: string; error: any }> {\n    try {\n      const supabase = this.db.getSupabaseClient(true);\n      const filePath = `${companyId}/documents/${Date.now()}-${fileName}`;\n\n      const { data, error } = await supabase.storage\n        .from('documents')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: false\n        });\n\n      if (error) {\n        return { url: '', path: '', error };\n      }\n\n      // Get signed URL (for private access)\n      const { data: signedUrlData, error: signedUrlError } = await supabase.storage\n        .from('documents')\n        .createSignedUrl(filePath, 3600); // 1 hour expiry\n\n      if (signedUrlError) {\n        return { url: '', path: '', error: signedUrlError };\n      }\n\n      return { url: signedUrlData.signedUrl, path: filePath, error: null };\n    } catch (error) {\n      return { url: '', path: '', error };\n    }\n  }\n\n  /**\n   * Delete file from storage\n   */\n  async deleteFile(bucket: string, filePath: string): Promise<{ error: any }> {\n    try {\n      const supabase = this.db.getSupabaseClient(true);\n      const { error } = await supabase.storage\n        .from(bucket)\n        .remove([filePath]);\n\n      return { error };\n    } catch (error) {\n      return { error };\n    }\n  }\n\n  /**\n   * Get signed URL for private file\n   */\n  async getSignedUrl(\n    bucket: string,\n    filePath: string,\n    expiresIn = 3600\n  ): Promise<{ url: string; error: any }> {\n    try {\n      const supabase = this.db.getSupabaseClient(true);\n      const { data, error } = await supabase.storage\n        .from(bucket)\n        .createSignedUrl(filePath, expiresIn);\n\n      if (error) {\n        return { url: '', error };\n      }\n\n      return { url: data.signedUrl, error: null };\n    } catch (error) {\n      return { url: '', error };\n    }\n  }\n}\n\nexport default SupabaseAuthConfig;"